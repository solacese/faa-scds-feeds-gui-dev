{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../VirtualList.svelte",
    "../App.svelte",
    "../ConnectionSpinner.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { onMount, tick } from 'svelte';\n\n\t// props\n\texport let items;\n\texport let height = '100%';\n\texport let itemHeight = undefined;\n\n\tlet foo;\n\n\t// read-only, but visible to consumers via bind:start\n\texport let start = 0;\n\texport let end = 0;\n\n\t// local state\n\tlet height_map = [];\n\tlet rows;\n\tlet viewport;\n\tlet contents;\n\tlet viewport_height = 0;\n\tlet visible;\n\tlet mounted;\n\n\tlet top = 0;\n\tlet bottom = 0;\n\tlet average_height;\n\n\t$: visible = items.slice(start, end).map((data, i) => {\n\t\treturn { index: i + start, data };\n\t});\n\n\t// whenever `items` changes, invalidate the current heightmap\n\t$: if (mounted) refresh(items, viewport_height, itemHeight);\n\n\tasync function refresh(items, viewport_height, itemHeight) {\n\t\tconst { scrollTop } = viewport;\n\n\t\tawait tick(); // wait until the DOM is up to date\n\n\t\tlet content_height = top - scrollTop;\n\t\tlet i = start;\n\n\t\twhile (content_height < viewport_height && i < items.length) {\n\t\t\tlet row = rows[i - start];\n\n\t\t\tif (!row) {\n\t\t\t\tend = i + 1;\n\t\t\t\tawait tick(); // render the newly visible row\n\t\t\t\trow = rows[i - start];\n\t\t\t}\n\n\t\t\tconst row_height = height_map[i] = itemHeight || row.offsetHeight;\n\t\t\tcontent_height += row_height;\n\t\t\ti += 1;\n\t\t}\n\n\t\tend = i;\n\n\t\tconst remaining = items.length - end;\n\t\taverage_height = (top + content_height) / end;\n\n\t\tbottom = remaining * average_height;\n\t\theight_map.length = items.length;\n\n\t}\n\n\tasync function handle_scroll() {\n\t\tconst { scrollTop } = viewport;\n\n\t\tconst old_start = start;\n\n\t\tfor (let v = 0; v < rows.length; v += 1) {\n\t\t\theight_map[start + v] = itemHeight || rows[v].offsetHeight;\n\t\t}\n\n\t\tlet i = 0;\n\t\tlet y = 0;\n\n\t\twhile (i < items.length) {\n\t\t\tconst row_height = height_map[i] || average_height;\n\t\t\tif (y + row_height > scrollTop) {\n\t\t\t\tstart = i;\n\t\t\t\ttop = y;\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ty += row_height;\n\t\t\ti += 1;\n\t\t}\n\n\t\twhile (i < items.length) {\n\t\t\ty += height_map[i] || average_height;\n\t\t\ti += 1;\n\n\t\t\tif (y > scrollTop + viewport_height) break;\n\t\t}\n\n\t\tend = i;\n\n\t\tconst remaining = items.length - end;\n\t\taverage_height = y / end;\n\n\t\twhile (i < items.length) height_map[i++] = average_height;\n\t\tbottom = remaining * average_height;\n\n\t\t// prevent jumping if we scrolled up into unknown territory\n\t\tif (start < old_start) {\n\t\t\tawait tick();\n\n\t\t\tlet expected_height = 0;\n\t\t\tlet actual_height = 0;\n\n\t\t\tfor (let i = start; i < old_start; i +=1) {\n\t\t\t\tif (rows[i - start]) {\n\t\t\t\t\texpected_height += height_map[i];\n\t\t\t\t\tactual_height += itemHeight || rows[i - start].offsetHeight;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst d = actual_height - expected_height;\n\t\t\tviewport.scrollTo(0, scrollTop + d);\n\t\t}\n\n\t\t// TODO if we overestimated the space these\n\t\t// rows would occupy we may need to add some\n\t\t// more. maybe we can just call handle_scroll again?\n\t}\n\n\t// trigger initial refresh\n\tonMount(() => {\n\t\trows = contents.getElementsByTagName('svelte-virtual-list-row');\n\t\tmounted = true;\n\t});\n</script>\n\n<style>\n\tsvelte-virtual-list-viewport {\n\t\tposition: relative;\n\t\toverflow-y: auto;\n\t\t-webkit-overflow-scrolling:touch;\n\t\tdisplay: block;\n\t}\n\n\tsvelte-virtual-list-contents, svelte-virtual-list-row {\n\t\tdisplay: block;\n\t}\n\n\tsvelte-virtual-list-row {\n\t\toverflow: hidden;\n\t}\n</style>\n\n<svelte-virtual-list-viewport\n\tbind:this={viewport}\n\tbind:offsetHeight={viewport_height}\n\ton:scroll={handle_scroll}\n\tstyle=\"height: {height};\"\n>\n\t<svelte-virtual-list-contents\n\t\tbind:this={contents}\n\t\tstyle=\"padding-top: {top}px; padding-bottom: {bottom}px;\"\n\t>\n\t\t{#each visible as row (row.index)}\n\t\t\t<svelte-virtual-list-row>\n\t\t\t\t<slot item={row.data}>Missing template</slot>\n\t\t\t</svelte-virtual-list-row>\n\t\t{/each}\n\t</svelte-virtual-list-contents>\n</svelte-virtual-list-viewport>\n",
    "<script>\n  import { setContext } from \"svelte\";\n  import { writable } from \"svelte/store\";\n  import { googleMapsConfig } from \"./google-maps.config\";\n  import { solaceContextKey } from \"./solace-client\";\n  import ConnectionForm from \"./ConnectionForm.svelte\";\n  import FeedToggles from \"./FeedToggles.svelte\";\n  import Map from \"./Map.svelte\";\n  import Console from \"./Console.svelte\";\n\n  export let googleMapsLoaded;\n\n  const googleMapsAccessToken = googleMapsConfig.accessToken;\n\n  let solaceClient = writable(null);\n  setContext(solaceContextKey, {\n    getSolaceClient: () => solaceClient,\n  });\n\n  let isConsoleExpanded = true;\n</script>\n\n<style>\n  .layout {\n    grid-template-columns: 28rem auto;\n    grid-template-areas: \"sidebar mainContent\";\n  }\n  .sidebar {\n    grid-area: sidebar;\n  }\n  .mainContent {\n    grid-area: mainContent;\n  }\n</style>\n\n<svelte:head>\n  <script\n    defer\n    async\n    src={`https://maps.googleapis.com/maps/api/js?key=${googleMapsAccessToken}&libraries=drawing&callback=initMap`}>\n    // Google Maps isn't available as a Node package because... Google eats glue? I have no idea.\n    // This script loads the Google Maps package and then calls the initMap callback defined in main.js,\n    // which will set this component's googleMapsLoaded state flag to true on completion.\n  </script>\n</svelte:head>\n\n<main class=\"p-2 overflow-x-hidden max-w-screen lg:h-screen lg:grid lg:gap-4 lg:p-4 layout\">\n  <div class=\"flex flex-col sidebar\">\n    <div>\n      <ConnectionForm />\n    </div>\n    <div class=\"mt-4\">\n      <FeedToggles />\n    </div>\n  </div>\n  <div class=\"flex flex-col mainContent\">\n    {#if googleMapsLoaded}\n      <div class=\"p-2 mt-4 bg-white rounded-lg shadow h-96 lg:h-full lg:mt-0\">\n        <Map />\n      </div>\n    {:else}\n      <div class=\"w-full bg-blue-300 rounded-lg shadow\" />\n    {/if}\n    <div class=\"w-full mt-4 bg-white rounded-lg shadow\">\n      <Console bind:isExpanded={isConsoleExpanded} />\n    </div>\n  </div>\n</main>\n",
    "<script>\n  export let size = 25;\n  export let speed = 750;\n  export let color = \"rgba(0,0,0,0.4)\";\n  export let thickness = 2;\n  export let gap = 40;\n  export let radius = 10;\n  let dash;\n  $: dash = (2 * Math.PI * radius * (100 - gap)) / 100;\n</script>\n\n<style>\n  .svelte-spinner {\n    transition-property: transform;\n    animation-name: svelte-spinner_infinite-spin;\n    animation-iteration-count: infinite;\n    animation-timing-function: linear;\n  }\n  @keyframes svelte-spinner_infinite-spin {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n</style>\n\n<!-- Ty EmilTholin for creating a high quality open source spinner -->\n<!-- https://github.com/EmilTholin/svelte-spinner/blob/master/src/index.svelte -->\n<svg height={size} width={size} style=\"animation-duration:{speed}ms;\" class=\"svelte-spinner\" viewbox=\"0 0 32 32\">\n  <circle\n    role=\"presentation\"\n    cx=\"16\"\n    cy=\"16\"\n    r={radius}\n    stroke={color}\n    fill=\"none\"\n    stroke-width={thickness}\n    stroke-dasharray=\"{dash},100\"\n    stroke-linecap=\"round\" />\n</svg>\n"
  ],
  "names": [],
  "mappings": "AAyIC,4BAA4B,eAAC,CAAC,AAC7B,QAAQ,CAAE,QAAQ,CAClB,UAAU,CAAE,IAAI,CAChB,2BAA2B,KAAK,CAChC,OAAO,CAAE,KAAK,AACf,CAAC,AAED,2CAA4B,CAAE,uBAAuB,eAAC,CAAC,AACtD,OAAO,CAAE,KAAK,AACf,CAAC,AAED,uBAAuB,eAAC,CAAC,AACxB,QAAQ,CAAE,MAAM,AACjB,CAAC;AC/HA,OAAO,cAAC,CAAC,AACP,qBAAqB,CAAE,KAAK,CAAC,IAAI,CACjC,mBAAmB,CAAE,qBAAqB,AAC5C,CAAC,AACD,QAAQ,cAAC,CAAC,AACR,SAAS,CAAE,OAAO,AACpB,CAAC,AACD,YAAY,cAAC,CAAC,AACZ,SAAS,CAAE,WAAW,AACxB,CAAC;ACpBD,eAAe,cAAC,CAAC,AACf,mBAAmB,CAAE,SAAS,CAC9B,cAAc,CAAE,0CAA4B,CAC5C,yBAAyB,CAAE,QAAQ,CACnC,yBAAyB,CAAE,MAAM,AACnC,CAAC,AACD,WAAW,0CAA6B,CAAC,AACvC,IAAI,AAAC,CAAC,AACJ,SAAS,CAAE,OAAO,IAAI,CAAC,AACzB,CAAC,AACD,EAAE,AAAC,CAAC,AACF,SAAS,CAAE,OAAO,MAAM,CAAC,AAC3B,CAAC,AACH,CAAC"
}